package xunyoyo/linalg/lib/matrix

// Values
fn diag(Array[Double]) -> Matrix

fn diagonal(Matrix, offset~ : Int = ..) -> Array[Double]

fn eye(Int) -> Matrix

fn lstsq(Matrix, Matrix) -> Matrix!

fn new_matrix(Array[Array[Double]], rows~ : Int = .., cols~ : Int = ..) -> Matrix

fn solve(Matrix, Matrix) -> Matrix!

fn zero(Int, Int) -> Matrix

// Types and methods
type Matrix
impl Matrix {
  apply(Self, (Double) -> Double) -> Self
  cholesky(Self) -> Self
  copy(Self) -> Self
  det(Self) -> Double
  dot(Self, Self) -> Double!MatrixShapeError
  eigen(Self, max_iterations~ : Int = .., tol~ : Double = ..) -> (Array[Double], Self)!
  flat(Self) -> Self
  get(Self, Int, Int) -> Double
  inv(Self) -> Self!
  k(Self, Double) -> Self
  new(Int, Int) -> Self
  norm(Self, ord~ : NormType = .., axis~ : Type = ..) -> Double
  print(Self) -> Unit
  qr(Self) -> (Self, Self)!
  rank(Self) -> Int
  reshape(Self, Int, Int) -> Self
  shape(Self) -> (Int, Int)
  slice(Self, Int, Int, Int, Int) -> Self!SliceError
  svd(Self) -> (Self, Self, Self)!
  tr(Self) -> Double!MatrixShapeError
  trace(Self, Int) -> Double
  transpose(Self) -> Self
  vdot(Self, Self) -> Double!MatrixShapeError
}

type MatrixShapeError
impl Show for MatrixShapeError

type NormType

type SliceError
impl Show for SliceError

type Type

// Type aliases

// Traits

